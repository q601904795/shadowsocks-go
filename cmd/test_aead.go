package main

import (
	ss "github.com/qunxyz/shadowsocks-go/shadowsocks"
	"crypto/cipher"
	"fmt"
)

func main() {
	method := "chacha20-ietf-poly1305"
	password := "123456"
	c, err := ss.NewCipher(method, password)
	if err != nil {
		ss.Logger.Fields(ss.LogFields{
			"method": method,
			"password":password,
			"err": err,
		}).Fatal("new cipher error")
	}
	//iv, err := c.NewIV()
	//iv := []byte{144,196,220,148,226,43,179,9,123,110,176,237,81,3,152,169,39,139,19,172,126,205,250,168,86,87,154,73,35,214,32,54}
	iv := []byte{207,53,228,65,210,245,15,152,236,95,87,127}
	c.Init(iv, ss.Decrypt)
	src := []byte{18,125,116,118,123,41,60,234,191,27,78,31,154,62,82,113,232,247,90,176,81,240,208,181,20,200,194,24,223,43,188,237,41,161,66,16,127,227,14,121,22,92,238,157,193,162,48,207,177,43,163,17,64,213,225,148,128,10,208,51,40,83,230,99,123,69,48,216,7,103,113,166,156,243,104,201,9,139,29,202,251,60,198,149,81,40,196,229,222,108,178,80,108,56,200,179,118,61,206,98,80,25,229229,38,53,163,29,251,127,84,105,73,225,248,126,48,74,73,39,216,23,167,107,229,149,36,211,126,69,201,13,29,218,10,98,132,205,68,252,138,218,213,12,178,185,117,204,252,114,132,131,253,168,7,240,39,222,201,199,223,3,118,161,21,158,240,2,108,88,105,103,108,72,154,96,226,107,93,95,133,94,54,17,251,243,79,243,85,196,170,216,218,25,73,198,173,93,188,220,148,76,174,94,219,76,8,11,63,126,255,6,196,169,204,244,53,81,28,221,179,133,225,227,109,248,83,14,51,12,153,23,28,102,143,161,162,128,187,112,231,148,219,44,188,16,240,203,98,85,238,202,100,143,102,74,216,120,92,239,0,132,147,102,68,179,211,25,239,86,125,255,145,101,39,103,180,11,167,1,73,216,60,237,24,26,39,56,44,147,24,144,136,5,51,178,46,163,215,92,175,72,52,91,123,55,216,4,32,191,156,75,69,244,100,159,101,205,63,59,38,122,187,11,89,254,157,40,12,130,160,8,109,239,250,207,176,110,115,179,194,251,4,159,207,238,83,16,115,37,28,100,253,66,146,8,18,76,18,51,197,195,240,52,230,83,38,184,107,109,95,42,175,46,150,53,128,104,184,136,73,49,134,213,46,3,135,170,9,215,94,230,81,25,156,7,169,161,119,244,213,245,172,165,114,66,206,235,42,195,75,132,1,230,246,45,18,69,42,253,22,106,37,102,86,45,66,61,167,197,131,193,48,233,224,132,197,208,89,152,212,32,36,47,243,35,65,237,81,125,44,194,220,207,97,179,87,151,251,211,130,210,245,160,42,70,77,223,92,184,140,106,69,83,69,114,155,236,151,114,107,130,214,189,161,184,111,238,174,201,168,196,69,100,84,165,108,83,83,81,187,209,104,96,186,155,37,78,206,60,224,26,38,140,124,224,74,34,111,132,200,245,156,225,74,2,172,237,23956,199,141,52,199,120,245,113,236,51,241,227,122,190,140,84,4,184,44,228,3,86,233,70,243,14,163,138,211,69,190,158,187,36,213,233,204,236,18,171,50,57,75,226,175,120,67,88,105,44,27,178,223127,180,185,16,151,1,127,233,57,47,233,41,199,89,122,108,233,35,173,145,71,176}
	dst := make([]byte, len(src)+c.GetCryptor().(cipher.AEAD).Overhead())

	fmt.Printf("iv: %d\n", iv)
	fmt.Printf("dst_len: %d\n", len(dst))
	fmt.Printf("src_len: %d\n", len(src))
	for i := 0; i < 10; i++ {
		c.(*ss.CipherAead).SetNonce(true)
		fmt.Printf("nonce: %d\n", c.(*ss.CipherAead).Nonce())
		err = c.Decrypt(dst, src)
		if err != nil { fmt.Println(err) }
		fmt.Printf("%d\n", dst)
	}
}